#!/usr/bin/env bash
# Edited on 25.07.2021

# this is a simple config for herbstluftwm

hc() {
    herbstclient "$@"
}

hc emit_hook reload

xsetroot -solid '#5A8E3A'

# remove all existing keybindings
hc keyunbind --all

# keybindings
# if you have a super key you will be much happier with Mod set to Mod4
Alt=Mod1    # Use alt as the main modifier
Mod=Mod4   # Use the super key as the main modifier
browser=brave
filemgr=pcmanfm
term=alacritty

hc set default_frame_layout max # max

#hc keybind $Mod-Shift-e quit
hc keybind $Mod-Shift-r reload
hc keybind $Mod-Shift-q close_or_remove # Closes the focused window or removes the current frame if no window is focused
hc keybind $Mod-Return spawn "${TERMINAL:-alacritty}" # use your $TERMINAL with xterm as fallback
hc keybind $Mod-Shift-Return spawn alacritty -e tmux # use your $TERMINAL with xterm as fallback
hc keybind $Mod+Shift+t spawn $term -e sh ~/.dotfiles/bin/switchr.sh
hc keybind $Mod-d spawn dmenu_run -i -l 10
hc keybind $Mod-q spawn rofi -combi-modi window#drun -theme solarized -font "hack 10" -show combi -icon-theme "Papirus" -show-icons
hc keybind $Mod-z spawn rofi -show window -theme solarized -font "hack 10" -show combi -icon-theme "Papirus" -show-icons

# open or raise
hc keybind $Mod-Shift-a spawn bash -c 'wmctrl -x -a brave || brave && herbstclient jumpto urgent' 
hc keybind $Mod-Shift-x spawn bash -c 'wmctrl -x -a pcmanfm || pcmanfm && herbstclient jumpto urgent' 

# basic movement in tiling and floating mode
# focusing clients - $mod+arrows | $mod+capsy
hc keybind $Mod-Left  focus left
hc keybind $Mod-Down  focus down
hc keybind $Mod-Up    focus up
hc keybind $Mod-Right focus right
hc keybind $Mod-j     focus left
hc keybind $Mod-k     focus down
hc keybind $Mod-i     focus up
hc keybind $Mod-l     focus right

# moving clients in tiling and floating mode - $mod+shift+arrow
hc keybind $Mod-Shift-Left  shift left
hc keybind $Mod-Shift-Down  shift down
hc keybind $Mod-Shift-Up    shift up
hc keybind $Mod-Shift-Right shift right

#moving clients in multi monitor
#hc keybind $Mod-Shift-Left or / shift left / \
#    chain , lock , shift_to_monitor -l , focus_monitor -l , unlock
#hc keybind $Mod-Shift-Down  or / shift down / \
#    chain , lock , shift_to_monitor -d , focus_monitor -d , unlock
#hc keybind $Mod-Shift-Up    or / shift up / \
#    chain , lock , shift_to_monitor -u , focus_monitor -u , unlock
#hc keybind $Mod-Shift-Right or / shift right / \
#    chain , lock , shift_to_monitor -r , focus_monitor -r , unlock
hc keybind $Mod-Shift-j  shift left
hc keybind $Mod-Shift-k  shift down
hc keybind $Mod-Shift-i  shift up
hc keybind $Mod-Shift-l  shift right

# move the window to the adjacent frame and close the current frame 
hc keybind $Mod-Shift-d or , and . compare tags.focus.curframe_wcount lt 2 . remove , shift left

# splitting frames
# default: create an empty frame at the specified direction
#hc keybind $Mod-u       split   bottom  0.5
#hc keybind $Mod-o       split   right   0.5

# ww : if the frame has one or no window, close the window and remove the frame
hc keybind $Mod-n close_and_remove
# I previously used this : hc keybind $Mod-n or , and . compare tags.focus.curframe_wcount lt 1 . remove , close


# ww: create an empty frame at the specified direction and focus on that
hc keybind $Mod-u chain , split   bottom  0.5 , focus -e down
hc keybind $Mod-o chain , split   right   0.5 , focus -e right
hc keybind $Mod-y chain , split   top  0.5 , focus -e up
hc keybind $Mod-p chain , split   left  0.5 , focus -e left
# ww : shift + u/o to create a frame and move the current window to it.
hc keybind $Mod-Shift-u chain , split bottom 0.5 , shift -e down
hc keybind $Mod-Shift-o chain , split right 0.5 , shift -e right
hc keybind $Mod-Shift-y chain , split top 0.5 , shift -e up
hc keybind $Mod-Shift-p chain , split left 0.5 , shift -e left
# ww: Focus Monitors
hc keybind Shift-$Alt-i focus_monitor -u
hc keybind Shift-$Alt-j focus_monitor -r
hc keybind Shift-$Alt-l focus_monitor -l
hc keybind Shift-$Alt-k focus_monitor -d
# ww: Lock Monitor
hc keybind $Mod-0 chain . lock_tag . spawn notify-send 'monitor locked'
hc keybind $Mod-Shift-0 chain . unlock_tag . spawn notify-send 'monitor unlocked'



# let the current frame explode into subframes
hc keybind $Mod-Control-space split explode

# resizing frames and floating clients
resizestep=0.02
hc keybind $Mod-Control-j       resize left +$resizestep
hc keybind $Mod-Control-k       resize down +$resizestep
hc keybind $Mod-Control-i       resize up +$resizestep
hc keybind $Mod-Control-l       resize right +$resizestep
hc keybind $Mod-Control-Left    resize left +$resizestep
hc keybind $Mod-Control-Down    resize down +$resizestep
hc keybind $Mod-Control-Up      resize up +$resizestep
hc keybind $Mod-Control-Right   resize right +$resizestep

hc keybind $Mod-Shift-space floating toggle

# tags
tag_names=( {1..5} )
#tag_names=(Main, Second)
tag_keys=( {1..5} 0 )

hc rename default "${tag_names[0]}" || true
for i in "${!tag_names[@]}" ; do
    hc add "${tag_names[$i]}"
    key="${tag_keys[$i]}"
    if ! [ -z "$key" ] ; then
        hc keybind "$Mod-$key" use_index "$i"
        hc keybind "$Mod-Shift-$key" chain . move_index "$i" . use_index "$i"
        hc keybind "$Mod-Control-$key" chain . move_index "$i"
    fi
done

# cycle through tags
hc keybind $Mod-period use_index +1 --skip-visible
hc keybind $Mod-comma  use_index -1 --skip-visible

# move window to next/previous tag
hc keybind $Mod-Shift-period move_index +1 --skip-visible
hc keybind $Mod-Shift-comma move_index -1 --skip-visible

# layouting
hc keybind $Mod-r remove
hc keybind $Mod-s floating toggle
hc keybind $Mod-f fullscreen toggle
hc keybind $Mod-Shift-f set_attr clients.focus.floating toggle
hc keybind $Mod-Shift-m set_attr clients.focus.minimized true
hc keybind $Mod-Control-m jumpto last-minimized
hc keybind $Mod-t pseudotile toggle
# The following cycles through the available layouts within a frame, but skips
# layouts, if the layout change wouldn't affect the actual window positions.
# I.e. if there are two windows within a frame, the grid layout is skipped.
hc keybind $Mod-space                                                           \
            or , and . compare tags.focus.curframe_wcount = 2                   \
                     . cycle_layout +1 horizontal vertical  horizontal max grid    \
               , cycle_layout +1
hc keybind $Mod-h cycle_layout +1 horizontal max horizontal

# mouse
hc mouseunbind --all
hc mousebind $Mod-Button1 move
hc mousebind $Mod-Button2 zoom
hc mousebind $Mod-Button3 resize

# focus
hc keybind $Mod-m   cycle_monitor
hc keybind $Mod-Tab         cycle_all +1
hc keybind $Mod-Shift-Tab   cycle_all -1
hc keybind $Mod-c cycle
hc keybind $Mod-x cycle_frame
#hc keybind $Mod-i jumpto urgent

# theme
hc attr theme.tiling.reset 1
hc attr theme.floating.reset 1
hc set frame_border_active_color '#222222cc'
hc set frame_border_normal_color '#101010cc'
hc set frame_bg_normal_color '#565656aa'
hc set frame_bg_active_color '#345F0Cef'
# hc set frame_bg_active_color '#345F0Caa'
hc set frame_border_width 1
hc set always_show_frame on
hc set frame_bg_transparent on
hc set frame_transparent_width 5
hc set frame_gap 3

hc attr theme.title_height 0 #15 ; removes the window titles. default was 15
hc attr theme.title_font 'Dejavu Sans:pixelsize=12'  # example using Xft
# hc attr theme.title_font '-*-fixed-medium-r-*-*-13-*-*-*-*-*-*-*'
hc attr theme.padding_top 2  # space below the title's baseline (i.e. text depth)
hc attr theme.active.color '#FB8C00'
hc attr theme.title_color '#ffffff'
hc attr theme.normal.color '#323232dd'
hc attr theme.urgent.color '#7811A1dd'
hc attr theme.normal.title_color '#898989'
hc attr theme.inner_width 1
hc attr theme.inner_color black
hc attr theme.border_width 3
hc attr theme.floating.border_width 4
hc attr theme.floating.outer_width 1
hc attr theme.floating.outer_color black
hc attr theme.active.inner_color '#789161'
hc attr theme.urgent.inner_color '#9A65B0'
hc attr theme.normal.inner_color '#606060'
# copy inner color to outer_color
for state in active urgent normal ; do
    hc substitute C theme.${state}.inner_color \
        attr theme.${state}.outer_color C
done
hc attr theme.active.outer_width 1
hc attr theme.background_color '#141414'

hc set window_gap 0
hc set frame_padding 0
hc set smart_window_surroundings off
hc set smart_frame_surroundings on
hc set mouse_recenter_gap 0
hc set focus_follows_mouse 1
# rules
hc unrule -F
#hc rule class=XTerm tag=3 # move all xterms to tag 3
hc rule focus=on # normally focus new clients
hc rule floatplacement=center
hc set swap_monitors_to_get_tag 1
#hc rule focus=off # normally do not focus new clients
# give focus to most common terminals
#hc rule class~'(.*[Rr]xvt.*|.*[Tt]erm|Konsole)' focus=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(DIALOG|UTILITY|SPLASH)' floating=on
hc rule windowtype='_NET_WM_WINDOW_TYPE_DIALOG' focus=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(NOTIFICATION|DOCK|DESKTOP)' manage=off

hc set tree_style '╾│ ├└╼─┐'

# unlock, just to be sure
hc unlock

# do multi monitor setup here, e.g.:
#hc set_monitors 1280x1024+0+0 1280x1024+1280+0
#hc set_monitors 1366x745+0+0
# or simply:
hc detect_monitors

# find the panel
panel=~/.config/herbstluftwm/panel.sh
[ -x "$panel" ] || panel=/etc/xdg/herbstluftwm/panel.sh
for monitor in $(hc list_monitors | cut -d: -f1) ; do
    # start it on each monitor
    "$panel" "$monitor" &
done


####### autostarts ##################
$HOME/.dotfiles/.config/ww-autostart.sh
#xmodmap ~/.Xmodmap
#pkill autokey-gtk; sleep 1; autokey-gtk &
#alttab -d 1 &
#lxpolkit &
#pkill tint2; sleep 1;tint2 &
#nm-applet &
##feh --bg-scale --randomize ~/Pictures/wallpapers/*
#variety &
